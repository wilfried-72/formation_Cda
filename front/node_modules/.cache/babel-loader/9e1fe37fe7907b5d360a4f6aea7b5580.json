{"ast":null,"code":"import * as Actions from \"../actions/ActionTypes\";\nconst initialState = {\n  users: [],\n  flashs: \"\",\n  choiceUser: []\n}; //se comporte comme un switch avec action\n\nexport default function UserReducer() {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    //ici pour le cas GET_POSTS on retourne action.payload\n    // ici la les data du json\n    // et par défaut la variable state qui est vide via initialSate\n    case Actions.GET_USERS:\n      return { ...state,\n        users: action.payload\n      };\n\n    case Actions.ADD_USER_LIKE:\n      return { ...state,\n        users: action.payload\n      };\n\n    case Actions.ADD_USER:\n      // ... veut dire qu'on recupère tous le state\n      console.log(\"message reducer\");\n      return [action.payload, ...state];\n\n    case Actions.EDIT_USER:\n      // ... veut dire qu'on recupère tous le state\n      // console.log(\"action.payload\", action.payload[0]._id)\n      return state.map(user => {\n        // console.log(\"user._id \", user._id )\n        // console.log(\"action.payload._id \", action.payload._id )\n        //   ici on recherche l'objet par l'id du post\n        if (user._id === action.payload._id) {\n          // console.log(\"user \" + action.payload.pseudo + \" find\")\n          // console.log(\"user pseudo\" ,action.payload.pseudo)\n          // console.log(\"user ages\", action.payload.ages)\n          //  si trouvé, on recupere tout les data du post et le contenu modifié\n          return { ...user,\n            pseudo: action.payload.pseudo,\n            ages: action.payload.ages\n          }; //sinon on renvoi le post d'origine\n        } else return user;\n      });\n\n    case Actions.CHOICE_USER:\n      return { ...state,\n        users: state.sort(function (a, b) {\n          return b.pseudo - a.pseudo;\n        }),\n        choiceUser: action.payload\n      };\n\n    default:\n      return state;\n  }\n}\n_c = UserReducer;\n\nvar _c;\n\n$RefreshReg$(_c, \"UserReducer\");","map":{"version":3,"sources":["/home/wil/Documents/Dev/gh/liwza/formation_Cda/front/src/store/reducers/UserReducer.js"],"names":["Actions","initialState","users","flashs","choiceUser","UserReducer","state","action","type","GET_USERS","payload","ADD_USER_LIKE","ADD_USER","console","log","EDIT_USER","map","user","_id","pseudo","ages","CHOICE_USER","sort","a","b"],"mappings":"AAAA,OAAO,KAAKA,OAAZ,MAAyB,wBAAzB;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,KAAK,EAAE,EADY;AAEnBC,EAAAA,MAAM,EAAE,EAFW;AAGnBC,EAAAA,UAAU,EAAE;AAHO,CAArB,C,CAMA;;AACA,eAAe,SAASC,WAAT,GAAmD;AAAA,MAA9BC,KAA8B,uEAAtBL,YAAsB;AAAA,MAARM,MAAQ;;AAChE,UAAQA,MAAM,CAACC,IAAf;AACE;AACA;AACA;AACA,SAAKR,OAAO,CAACS,SAAb;AACE,aAAO,EAAE,GAAGH,KAAL;AAAYJ,QAAAA,KAAK,EAAEK,MAAM,CAACG;AAA1B,OAAP;;AACF,SAAKV,OAAO,CAACW,aAAb;AACE,aAAO,EAAE,GAAGL,KAAL;AAAYJ,QAAAA,KAAK,EAAEK,MAAM,CAACG;AAA1B,OAAP;;AACF,SAAKV,OAAO,CAACY,QAAb;AACE;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ;AACA,aAAO,CAACP,MAAM,CAACG,OAAR,EAAiB,GAAGJ,KAApB,CAAP;;AACF,SAAKN,OAAO,CAACe,SAAb;AACE;AACA;AACA,aAAOT,KAAK,CAACU,GAAN,CAAWC,IAAD,IAAU;AACzB;AACA;AACA;AACA,YAAIA,IAAI,CAACC,GAAL,KAAaX,MAAM,CAACG,OAAP,CAAeQ,GAAhC,EAAqC;AACnC;AACA;AACA;AACA;AACA,iBAAO,EACL,GAAGD,IADE;AAELE,YAAAA,MAAM,EAAEZ,MAAM,CAACG,OAAP,CAAeS,MAFlB;AAGLC,YAAAA,IAAI,EAAEb,MAAM,CAACG,OAAP,CAAeU;AAHhB,WAAP,CALmC,CAUnC;AACD,SAXD,MAWO,OAAOH,IAAP;AACR,OAhBM,CAAP;;AAiBF,SAAKjB,OAAO,CAACqB,WAAb;AACE,aAAO,EACL,GAAGf,KADE;AAELJ,QAAAA,KAAK,EAAEI,KAAK,CAACgB,IAAN,CAAW,UAAUC,CAAV,EAAaC,CAAb,EAAgB;AAChC,iBAAOA,CAAC,CAACL,MAAF,GAAWI,CAAC,CAACJ,MAApB;AACD,SAFM,CAFF;AAIDf,QAAAA,UAAU,EAAEG,MAAM,CAACG;AAJlB,OAAP;;AAOF;AACE,aAAOJ,KAAP;AAzCJ;AA2CD;KA5CuBD,W","sourcesContent":["import * as Actions from \"../actions/ActionTypes\";\n\nconst initialState = {\n  users: [],\n  flashs: \"\",\n  choiceUser: []\n};\n\n//se comporte comme un switch avec action\nexport default function UserReducer(state = initialState, action) {\n  switch (action.type) {\n    //ici pour le cas GET_POSTS on retourne action.payload\n    // ici la les data du json\n    // et par défaut la variable state qui est vide via initialSate\n    case Actions.GET_USERS:\n      return { ...state, users: action.payload };\n    case Actions.ADD_USER_LIKE:\n      return { ...state, users: action.payload };\n    case Actions.ADD_USER:\n      // ... veut dire qu'on recupère tous le state\n      console.log(\"message reducer\")\n      return [action.payload, ...state];\n    case Actions.EDIT_USER:\n      // ... veut dire qu'on recupère tous le state\n      // console.log(\"action.payload\", action.payload[0]._id)\n      return state.map((user) => {\n        // console.log(\"user._id \", user._id )\n        // console.log(\"action.payload._id \", action.payload._id )\n        //   ici on recherche l'objet par l'id du post\n        if (user._id === action.payload._id) {\n          // console.log(\"user \" + action.payload.pseudo + \" find\")\n          // console.log(\"user pseudo\" ,action.payload.pseudo)\n          // console.log(\"user ages\", action.payload.ages)\n          //  si trouvé, on recupere tout les data du post et le contenu modifié\n          return {\n            ...user,\n            pseudo: action.payload.pseudo,\n            ages: action.payload.ages,\n          };\n          //sinon on renvoi le post d'origine\n        } else return user;\n      });\n    case Actions.CHOICE_USER:\n      return {\n        ...state,\n        users: state.sort(function (a, b) {\n          return b.pseudo - a.pseudo;\n        }), choiceUser: action.payload\n      };\n\n    default:\n      return state;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}