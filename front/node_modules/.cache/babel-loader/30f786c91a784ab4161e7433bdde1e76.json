{"ast":null,"code":"/** @preserve\n  * package: sweetalert2-react-content v4.2.0\n  * file: dist/sweetalert2-react-content.umd.js\n  * homepage: https://github.com/sweetalert2/sweetalert2-react-content#readme\n  * license: MIT\n  **/\n(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('react'), require('react-dom')) : typeof define === 'function' && define.amd ? define(['react', 'react-dom'], factory) : (global = typeof globalThis !== 'undefined' ? globalThis : global || self, global.sweetalert2ReactContent = factory(global.React, global.ReactDOM));\n})(this, function (React, ReactDOM) {\n  'use strict';\n\n  function _interopDefaultLegacy(e) {\n    return e && typeof e === 'object' && 'default' in e ? e : {\n      'default': e\n    };\n  }\n\n  var React__default = /*#__PURE__*/_interopDefaultLegacy(React);\n\n  var ReactDOM__default = /*#__PURE__*/_interopDefaultLegacy(ReactDOM);\n\n  const mounts = [{\n    key: 'title',\n    getter: swal => swal.getTitle()\n  }, {\n    key: 'html',\n    getter: swal => swal.getHtmlContainer()\n  }, {\n    key: 'confirmButtonText',\n    getter: swal => swal.getConfirmButton()\n  }, {\n    key: 'denyButtonText',\n    getter: swal => swal.getDenyButton()\n  }, {\n    key: 'cancelButtonText',\n    getter: swal => swal.getCancelButton()\n  }, {\n    key: 'footer',\n    getter: swal => swal.getFooter()\n  }, {\n    key: 'closeButtonHtml',\n    getter: swal => swal.getCloseButton()\n  }, {\n    key: 'iconHtml',\n    getter: swal => swal.getIcon().querySelector('.swal2-icon-content')\n  }, {\n    key: 'loaderHtml',\n    getter: swal => swal.getLoader()\n  }];\n\n  const noop = () => {}; // eslint-disable-line @typescript-eslint/no-empty-function\n\n\n  function withReactContent(ParentSwal) {\n    /* Returns `params` separated into a tuple of `reactParams` (the React params that need to be rendered)\n    and`otherParams` (all the other parameters, with any React params replaced with a space ' ') */\n    function extractReactParams(params) {\n      const reactParams = {};\n      const otherParams = {};\n      const mountKeys = mounts.map(mount => mount.key);\n      Object.entries(params).forEach(_ref => {\n        let [key, value] = _ref;\n\n        if (mountKeys.includes(key) && /*#__PURE__*/React__default[\"default\"].isValidElement(value)) {\n          reactParams[key] = value;\n          otherParams[key] = ' ';\n        } else {\n          otherParams[key] = value;\n        }\n      });\n      return [reactParams, otherParams];\n    }\n\n    function render(swal, reactParams) {\n      Object.entries(reactParams).forEach(_ref2 => {\n        let [key, value] = _ref2;\n        const mount = mounts.find(mount => mount.key === key);\n        const domElement = mount.getter(ParentSwal);\n        ReactDOM__default[\"default\"].render(value, domElement);\n\n        swal.__mountedDomElements.push(domElement);\n      });\n    }\n\n    function unrender(swal) {\n      swal.__mountedDomElements.forEach(domElement => {\n        ReactDOM__default[\"default\"].unmountComponentAtNode(domElement);\n      });\n\n      swal.__mountedDomElements = [];\n    }\n\n    return class extends ParentSwal {\n      static argsToParams(args) {\n        if ( /*#__PURE__*/React__default[\"default\"].isValidElement(args[0]) || /*#__PURE__*/React__default[\"default\"].isValidElement(args[1])) {\n          const params = {};\n          ['title', 'html', 'icon'].forEach((name, index) => {\n            if (args[index] !== undefined) {\n              params[name] = args[index];\n            }\n          });\n          return params;\n        } else {\n          return ParentSwal.argsToParams(args);\n        }\n      }\n\n      _main(params, mixinParams) {\n        this.__mountedDomElements = [];\n        this.__params = Object.assign({}, mixinParams, params);\n        const [reactParams, otherParams] = extractReactParams(this.__params);\n        const superDidOpen = otherParams.didOpen || noop;\n        const superDidDestroy = otherParams.didDestroy || noop;\n        return super._main(Object.assign({}, otherParams, {\n          didOpen: popup => {\n            render(this, reactParams);\n            superDidOpen(popup);\n          },\n          didDestroy: popup => {\n            superDidDestroy(popup);\n            unrender(this);\n          }\n        }));\n      }\n\n      update(params) {\n        Object.assign(this.__params, params);\n        unrender(this);\n        const [reactParams, otherParams] = extractReactParams(this.__params);\n        super.update(otherParams);\n        render(this, reactParams);\n      }\n\n    };\n  }\n\n  return withReactContent;\n});","map":{"version":3,"sources":["../src/mounts.js","../src/index.js"],"names":["mounts","key","getter","swal","noop","reactParams","otherParams","mountKeys","mount","Object","React","domElement","ReactDOM","argsToParams","args","params","ParentSwal","_main","extractReactParams","superDidOpen","superDidDestroy","didOpen","popup","render","didDestroy","unrender","update"],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAO,QAAMA,MAAM,GAAG,CACpB;AACEC,IAAAA,GAAG,EADL,OAAA;AAEEC,IAAAA,MAAM,EAAEC,IAAI,IAAIA,IAAI,CAAJA,QAAAA;AAFlB,GADoB,EAKpB;AACEF,IAAAA,GAAG,EADL,MAAA;AAEEC,IAAAA,MAAM,EAAEC,IAAI,IAAIA,IAAI,CAAJA,gBAAAA;AAFlB,GALoB,EASpB;AACEF,IAAAA,GAAG,EADL,mBAAA;AAEEC,IAAAA,MAAM,EAAEC,IAAI,IAAIA,IAAI,CAAJA,gBAAAA;AAFlB,GAToB,EAapB;AACEF,IAAAA,GAAG,EADL,gBAAA;AAEEC,IAAAA,MAAM,EAAEC,IAAI,IAAIA,IAAI,CAAJA,aAAAA;AAFlB,GAboB,EAiBpB;AACEF,IAAAA,GAAG,EADL,kBAAA;AAEEC,IAAAA,MAAM,EAAEC,IAAI,IAAIA,IAAI,CAAJA,eAAAA;AAFlB,GAjBoB,EAqBpB;AACEF,IAAAA,GAAG,EADL,QAAA;AAEEC,IAAAA,MAAM,EAAEC,IAAI,IAAIA,IAAI,CAAJA,SAAAA;AAFlB,GArBoB,EAyBpB;AACEF,IAAAA,GAAG,EADL,iBAAA;AAEEC,IAAAA,MAAM,EAAEC,IAAI,IAAIA,IAAI,CAAJA,cAAAA;AAFlB,GAzBoB,EA6BpB;AACEF,IAAAA,GAAG,EADL,UAAA;AAEEC,IAAAA,MAAM,EAAEC,IAAI,IAAIA,IAAI,CAAJA,OAAAA,GAAAA,aAAAA,CAAAA,qBAAAA;AAFlB,GA7BoB,EAiCpB;AACEF,IAAAA,GAAG,EADL,YAAA;AAEEC,IAAAA,MAAM,EAAEC,IAAI,IAAIA,IAAI,CAAJA,SAAAA;AAFlB,GAjCoB,CAAf;;ACIP,QAAMC,IAAI,GAAG,MAAM,CAAnB,CAAA,C,CAAA;;;AAEe,WAAA,gBAAA,CAAA,UAAA,EAAuC;AACpD;AACF;AACE,aAAA,kBAAA,CAAA,MAAA,EAAqC;AACnC,YAAMC,WAAW,GAAjB,EAAA;AACA,YAAMC,WAAW,GAAjB,EAAA;AACA,YAAMC,SAAS,GAAGP,MAAM,CAANA,GAAAA,CAAWQ,KAAK,IAAIA,KAAK,CAA3C,GAAkBR,CAAlB;AACAS,MAAAA,MAAM,CAANA,OAAAA,CAAAA,MAAAA,EAAAA,OAAAA,CAA+B,QAAkB;AAAA,YAAjB,CAAA,GAAA,EAAD,KAAC,CAAiB;;AAC/C,YAAIF,SAAS,CAATA,QAAAA,CAAAA,GAAAA,KAAAA,aAA2BG,cAAAA,CAAAA,SAAAA,CAAAA,CAAAA,cAAAA,CAA/B,KAA+BA,CAA/B,EAA4D;AAC1DL,UAAAA,WAAW,CAAXA,GAAW,CAAXA,GAAAA,KAAAA;AACAC,UAAAA,WAAW,CAAXA,GAAW,CAAXA,GAAAA,GAAAA;AAFF,SAAA,MAGO;AACLA,UAAAA,WAAW,CAAXA,GAAW,CAAXA,GAAAA,KAAAA;AACD;AANHG,OAAAA;AAQA,aAAO,CAAA,WAAA,EAAP,WAAO,CAAP;AACD;;AACD,aAAA,MAAA,CAAA,IAAA,EAAA,WAAA,EAAoC;AAClCA,MAAAA,MAAM,CAANA,OAAAA,CAAAA,WAAAA,EAAAA,OAAAA,CAAoC,SAAkB;AAAA,YAAjB,CAAA,GAAA,EAAD,KAAC,CAAiB;AACpD,cAAMD,KAAK,GAAGR,MAAM,CAANA,IAAAA,CAAYQ,KAAK,IAAIA,KAAK,CAALA,GAAAA,KAAnC,GAAcR,CAAd;AACA,cAAMW,UAAU,GAAGH,KAAK,CAALA,MAAAA,CAAnB,UAAmBA,CAAnB;AACAI,QAAAA,iBAAAA,CAAAA,SAAAA,CAAAA,CAAAA,MAAAA,CAAAA,KAAAA,EAAAA,UAAAA;;AACAT,QAAAA,IAAI,CAAJA,oBAAAA,CAAAA,IAAAA,CAAAA,UAAAA;AAJFM,OAAAA;AAMD;;AAED,aAAA,QAAA,CAAA,IAAA,EAAyB;AACvBN,MAAAA,IAAI,CAAJA,oBAAAA,CAAAA,OAAAA,CAAkCQ,UAAU,IAAI;AAC9CC,QAAAA,iBAAAA,CAAAA,SAAAA,CAAAA,CAAAA,sBAAAA,CAAAA,UAAAA;AADFT,OAAAA;;AAGAA,MAAAA,IAAI,CAAJA,oBAAAA,GAAAA,EAAAA;AACD;;AAED,WAAO,cAAA,UAAA,CAAyB;AACX,aAAZU,YAAY,CAAA,IAAA,EAAQ;AACzB,aAAA,aAAIH,cAAAA,CAAAA,SAAAA,CAAAA,CAAAA,cAAAA,CAAqBI,IAAI,CAAzBJ,CAAyB,CAAzBA,KAAAA,aAAiCA,cAAAA,CAAAA,SAAAA,CAAAA,CAAAA,cAAAA,CAAqBI,IAAI,CAA9D,CAA8D,CAAzBJ,CAArC,EAAoE;AAClE,gBAAMK,MAAM,GAAZ,EAAA;AACC,WAAA,OAAA,EAAA,MAAA,EAAA,MAAA,EAAA,OAAA,CAAkC,CAAA,IAAA,EAAA,KAAA,KAAiB;AAClD,gBAAID,IAAI,CAAJA,KAAI,CAAJA,KAAJ,SAAA,EAA+B;AAC7BC,cAAAA,MAAM,CAANA,IAAM,CAANA,GAAeD,IAAI,CAAnBC,KAAmB,CAAnBA;AACD;AAHF,WAAA;AAKD,iBAAA,MAAA;AAPF,SAAA,MAQO;AACL,iBAAOC,UAAU,CAAVA,YAAAA,CAAP,IAAOA,CAAP;AACD;AACF;;AAEDC,MAAAA,KAAK,CAAA,MAAA,EAAA,WAAA,EAAuB;AAC1B,aAAA,oBAAA,GAAA,EAAA;AACA,aAAA,QAAA,GAAgBR,MAAM,CAANA,MAAAA,CAAAA,EAAAA,EAAAA,WAAAA,EAAhB,MAAgBA,CAAhB;AACA,cAAM,CAAA,WAAA,EAAA,WAAA,IAA6BS,kBAAkB,CAAC,KAAtD,QAAqD,CAArD;AACA,cAAMC,YAAY,GAAGb,WAAW,CAAXA,OAAAA,IAArB,IAAA;AACA,cAAMc,eAAe,GAAGd,WAAW,CAAXA,UAAAA,IAAxB,IAAA;AACA,eAAO,MAAA,KAAA,CACL,MAAM,CAAN,MAAA,CAAA,EAAA,EAAA,WAAA,EAA+B;AAC7Be,UAAAA,OAAO,EAAEC,KAAK,IAAI;AAChBC,YAAAA,MAAM,CAAA,IAAA,EAANA,WAAM,CAANA;AACAJ,YAAAA,YAAY,CAAZA,KAAY,CAAZA;AAH2B,WAAA;AAK7BK,UAAAA,UAAU,EAAEF,KAAK,IAAI;AACnBF,YAAAA,eAAe,CAAfA,KAAe,CAAfA;AACAK,YAAAA,QAAQ,CAARA,IAAQ,CAARA;AACD;AAR4B,SAA/B,CADK,CAAP;AAYD;;AAEDC,MAAAA,MAAM,CAAA,MAAA,EAAU;AACdjB,QAAAA,MAAM,CAANA,MAAAA,CAAc,KAAdA,QAAAA,EAAAA,MAAAA;AACAgB,QAAAA,QAAQ,CAARA,IAAQ,CAARA;AACA,cAAM,CAAA,WAAA,EAAA,WAAA,IAA6BP,kBAAkB,CAAC,KAAtD,QAAqD,CAArD;AACA,cAAA,MAAA,CAAA,WAAA;AACAK,QAAAA,MAAM,CAAA,IAAA,EAANA,WAAM,CAANA;AACD;;AAzC6B,KAAhC;AA2CD","sourcesContent":["export const mounts = [\n  {\n    key: 'title',\n    getter: swal => swal.getTitle(),\n  },\n  {\n    key: 'html',\n    getter: swal => swal.getHtmlContainer(),\n  },\n  {\n    key: 'confirmButtonText',\n    getter: swal => swal.getConfirmButton(),\n  },\n  {\n    key: 'denyButtonText',\n    getter: swal => swal.getDenyButton(),\n  },\n  {\n    key: 'cancelButtonText',\n    getter: swal => swal.getCancelButton(),\n  },\n  {\n    key: 'footer',\n    getter: swal => swal.getFooter(),\n  },\n  {\n    key: 'closeButtonHtml',\n    getter: swal => swal.getCloseButton(),\n  },\n  {\n    key: 'iconHtml',\n    getter: swal => swal.getIcon().querySelector('.swal2-icon-content'),\n  },\n  {\n    key: 'loaderHtml',\n    getter: swal => swal.getLoader(),\n  },\n]\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { mounts } from './mounts'\n\nconst noop = () => {} // eslint-disable-line @typescript-eslint/no-empty-function\n\nexport default function withReactContent (ParentSwal) {\n  /* Returns `params` separated into a tuple of `reactParams` (the React params that need to be rendered)\n  and`otherParams` (all the other parameters, with any React params replaced with a space ' ') */\n  function extractReactParams (params) {\n    const reactParams = {}\n    const otherParams = {}\n    const mountKeys = mounts.map(mount => mount.key)\n    Object.entries(params).forEach(([key, value]) => {\n      if (mountKeys.includes(key) && React.isValidElement(value)) {\n        reactParams[key] = value\n        otherParams[key] = ' '\n      } else {\n        otherParams[key] = value\n      }\n    })\n    return [reactParams, otherParams]\n  }\n  function render (swal, reactParams) {\n    Object.entries(reactParams).forEach(([key, value]) => {\n      const mount = mounts.find(mount => mount.key === key)\n      const domElement = mount.getter(ParentSwal)\n      ReactDOM.render(value, domElement)\n      swal.__mountedDomElements.push(domElement)\n    })\n  }\n\n  function unrender (swal) {\n    swal.__mountedDomElements.forEach(domElement => {\n      ReactDOM.unmountComponentAtNode(domElement)\n    })\n    swal.__mountedDomElements = []\n  }\n\n  return class extends ParentSwal {\n    static argsToParams (args) {\n      if (React.isValidElement(args[0]) || React.isValidElement(args[1])) {\n        const params = {}\n        ;['title', 'html', 'icon'].forEach((name, index) => {\n          if (args[index] !== undefined) {\n            params[name] = args[index]\n          }\n        })\n        return params\n      } else {\n        return ParentSwal.argsToParams(args)\n      }\n    }\n\n    _main (params, mixinParams) {\n      this.__mountedDomElements = []\n      this.__params = Object.assign({}, mixinParams, params)\n      const [reactParams, otherParams] = extractReactParams(this.__params)\n      const superDidOpen = otherParams.didOpen || noop\n      const superDidDestroy = otherParams.didDestroy || noop\n      return super._main(\n        Object.assign({}, otherParams, {\n          didOpen: popup => {\n            render(this, reactParams)\n            superDidOpen(popup)\n          },\n          didDestroy: popup => {\n            superDidDestroy(popup)\n            unrender(this)\n          },\n        }),\n      )\n    }\n\n    update (params) {\n      Object.assign(this.__params, params)\n      unrender(this)\n      const [reactParams, otherParams] = extractReactParams(this.__params)\n      super.update(otherParams)\n      render(this, reactParams)\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"script"}