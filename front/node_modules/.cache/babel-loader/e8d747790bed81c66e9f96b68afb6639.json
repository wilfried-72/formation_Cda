{"ast":null,"code":"import * as Actions from \"../actions/ActionTypes\";\nconst initialState = {\n  users: [],\n  flashs: \"\",\n  choiceUser: [],\n  posts: []\n}; //se comporte comme un switch avec action\n\nexport default function UserReducer() {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    //ici pour le cas GET_POSTS on retourne action.payload\n    // et par défaut la variable state qui est vide via initialSate\n    case Actions.GET_USERS:\n      return { ...state,\n        users: action.payload\n      };\n\n    case Actions.ADD_USER_LIKE:\n      // console.log(\"action.payload\", action.payload )\n      return { ...state,\n        users: action.payload\n      };\n\n    case Actions.ADD_USER:\n      // ... veut dire qu'on recupère tous le state\n      console.log(\"message reducer\");\n      return [action.payload, ...state];\n\n    case Actions.EDIT_USER:\n      return { ...state,\n        users: action.payload\n      };\n\n    case Actions.CHOICE_USER:\n      // console.log(\"CHOICE_USER \", state)\n      return { ...state,\n        choiceUser: action.payload\n      };\n\n    default:\n      return state;\n  }\n}\n_c = UserReducer;\n\nvar _c;\n\n$RefreshReg$(_c, \"UserReducer\");","map":{"version":3,"sources":["/home/wil/Documents/Dev/gh/liwza/formation_Cda/front/src/store/reducers/UserReducer.js"],"names":["Actions","initialState","users","flashs","choiceUser","posts","UserReducer","state","action","type","GET_USERS","payload","ADD_USER_LIKE","ADD_USER","console","log","EDIT_USER","CHOICE_USER"],"mappings":"AAAA,OAAO,KAAKA,OAAZ,MAAyB,wBAAzB;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,KAAK,EAAE,EADY;AAEnBC,EAAAA,MAAM,EAAE,EAFW;AAGnBC,EAAAA,UAAU,EAAE,EAHO;AAInBC,EAAAA,KAAK,EAAE;AAJY,CAArB,C,CAOA;;AACA,eAAe,SAASC,WAAT,GAAmD;AAAA,MAA9BC,KAA8B,uEAAtBN,YAAsB;AAAA,MAARO,MAAQ;;AAChE,UAAQA,MAAM,CAACC,IAAf;AACE;AACA;AACA,SAAKT,OAAO,CAACU,SAAb;AACE,aAAO,EAAE,GAAGH,KAAL;AAAYL,QAAAA,KAAK,EAAEM,MAAM,CAACG;AAA1B,OAAP;;AACF,SAAKX,OAAO,CAACY,aAAb;AACE;AACA,aAAO,EAAE,GAAGL,KAAL;AAAYL,QAAAA,KAAK,EAAEM,MAAM,CAACG;AAA1B,OAAP;;AACF,SAAKX,OAAO,CAACa,QAAb;AACE;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ;AACA,aAAO,CAACP,MAAM,CAACG,OAAR,EAAiB,GAAGJ,KAApB,CAAP;;AACF,SAAKP,OAAO,CAACgB,SAAb;AACE,aAAO,EAAE,GAAGT,KAAL;AAAYL,QAAAA,KAAK,EAAEM,MAAM,CAACG;AAA1B,OAAP;;AACF,SAAKX,OAAO,CAACiB,WAAb;AACE;AACA,aAAO,EACL,GAAGV,KADE;AAELH,QAAAA,UAAU,EAAEI,MAAM,CAACG;AAFd,OAAP;;AAKF;AACE,aAAOJ,KAAP;AAtBJ;AAwBD;KAzBuBD,W","sourcesContent":["import * as Actions from \"../actions/ActionTypes\";\n\nconst initialState = {\n  users: [],\n  flashs: \"\",\n  choiceUser: [],\n  posts: [],\n};\n\n//se comporte comme un switch avec action\nexport default function UserReducer(state = initialState, action) {\n  switch (action.type) {\n    //ici pour le cas GET_POSTS on retourne action.payload\n    // et par défaut la variable state qui est vide via initialSate\n    case Actions.GET_USERS:\n      return { ...state, users: action.payload };\n    case Actions.ADD_USER_LIKE:\n      // console.log(\"action.payload\", action.payload )\n      return { ...state, users: action.payload };\n    case Actions.ADD_USER:\n      // ... veut dire qu'on recupère tous le state\n      console.log(\"message reducer\")\n      return [action.payload, ...state];\n    case Actions.EDIT_USER:\n      return { ...state, users: action.payload }\n    case Actions.CHOICE_USER:\n      // console.log(\"CHOICE_USER \", state)\n      return {\n        ...state,\n        choiceUser: action.payload\n      };\n\n    default:\n      return state;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}